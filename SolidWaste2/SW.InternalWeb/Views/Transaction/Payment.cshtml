@model SW.InternalWeb.Models.Transaction.TransactionPaymentViewModel
@{
    ViewBag.Title = "Payment";
    ViewBag.ATitle = "Payment";
}

<div class="row">
    <div class="col-md-12">
        @using (Html.BeginForm("Payment", "Transaction", FormMethod.Post, new { @role = "form" }))
        {
            <div class="panel panel-default">
                <div class="panel-body">
                    <div hidden="hidden">
                        <div id="CustomerID_Lock">@Model.CustomerID</div>
                        <div id="TransactionHoldingID_Lock">@Model.TransactionHoldingID</div>
                        @Html.HiddenFor(m => m.Locks)
                    </div>
                    <div class="row">
                        <div class="col-md-9">
                            <div class="row form-group">
                                <div class="col-md-3">
                                    @Html.LabelFor(m => m.CustomerID, new { @class = "control-label font-bold" })
                                    @Html.TextBoxFor(m => m.CustomerID, new { @class = "form-control font-mono text-uppercase", @tabindex = 1 })
                                </div>
                                <div class="col-md-9">
                                    @Html.LabelFor(m => m.CustomerName, new { @class = "control-label font-bold" })
                                    @Html.TextBoxFor(m => m.CustomerName, new { @class = "form-control font-mono text-uppercase", @readonly = "readonly" })
                                </div>
                            </div>
                            <div class="row form-group">
                                <div class="col-md-12">
                                    @Html.LabelFor(m => m.TransactionHoldingID, new { @class = "control-label font-bold" })
                                    <select class="form-control font-mono text-uppercase" tabindex="2" asp-for="TransactionHoldingID"></select>
                                </div>
                            </div>
                            <div class="row" id="TransactionDetails" hidden="hidden">
                                <div class="col-md-6 form-group">
                                    @Html.Label(string.Empty, "Holding Transaction Code", new { @class = "control-label font-bold" })
                                    <input type="text" id="TransactionHolding_TransactionDescription" class="form-control font-mono text-uppercase" readonly />
                                </div>
                                <div class="col-md-3 form-group">
                                    @Html.Label(string.Empty, "Amount", new { @class = "control-label font-bold" })
                                    <input type="text" id="TransactionHolding_TransactionAmt" class="form-control font-mono text-uppercase" readonly />
                                </div>
                                <div class="col-md-3 form-group">
                                    @Html.Label(string.Empty, "Submitted", new { @class = "control-label font-bold" })
                                    <input type="text" id="TransactionHolding_AddDateTime" class="form-control font-mono text-uppercase" readonly />
                                </div>
                                <div class="col-md-6 form-group">
                                    @Html.Label(string.Empty, "Submitted By", new { @class = "control-label font-bold" })
                                    <input type="text" id="TransactionHolding_Sender" class="form-control font-mono text-uppercase" readonly />
                                </div>
                                <div class="col-md-6 form-group">
                                    @Html.Label(string.Empty, "Status", new { @class = "control-label font-bold" })
                                    <input type="text" id="TransactionHolding_Status" class="form-control font-mono text-uppercase" readonly />
                                </div>
                            </div>
                            <div class="row form-group">
                                <div class="col-md-6">
                                    @Html.LabelFor(m => m.TransactionCodeID, new { @class = "control-label font-bold" })
                                    <select class="form-control font-mono text-uppercase" tabindex="3" asp-for="TransactionCodeID"></select>
                                </div>
                                <div class="col-md-3">
                                    @Html.LabelFor(m => m.TransactionAmount, new { @class = "control-label font-bold" })
                                    @Html.TextBoxFor(m => m.TransactionAmount, new { @class = "form-control font-mono text-uppercase", @tabindex = 4 })
                                </div>
                                <div class="col-md-3">
                                    @Html.LabelFor(m => m.CheckNumber, new { @class = "control-label font-bold" })
                                    @Html.TextBoxFor(m => m.CheckNumber, new { @class = "form-control font-mono text-uppercase", @tabindex = 5 })
                                </div>
                            </div>
                            <div class="row form-group" id="TransactionComment">
                                <div class="col-md-12">
                                    @Html.LabelFor(m => m.Comment, new { @class = "control-label font-bold" })
                                    @Html.TextAreaFor(m => m.Comment, new { @class = "form-control font-mono text-uppercase", rows = 3, @tabindex = 6 })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-5ths col-5ths-farleft">
                                    @Html.Label(string.Empty, "Balance Before", new { @class = "control-label font-bold" })
                                    <input type="text" id="BalanceBefore" class="form-control font-mono" readonly />
                                </div>
                                <div class="col-md-5ths">
                                    @Html.Label(string.Empty, "Balance After", new { @class = "control-label font-bold" })
                                    <input type="text" id="BalanceAfter" class="form-control font-mono" readonly />
                                </div>
                                <div class="col-md-5ths">
                                    @Html.Label(string.Empty, "Counselors Before", new { @class = "control-label font-bold" })
                                    <input type="text" id="CounselorsBefore" class="form-control font-mono" readonly />
                                </div>
                                <div class="col-md-5ths">
                                    @Html.Label(string.Empty, "Counselors After", new { @class = "control-label font-bold" })
                                    <input type="text" id="CounselorsAfter" class="form-control font-mono" readonly />
                                </div>
                                <div class="col-md-5ths col-5ths-farright">
                                    @Html.Label(string.Empty, "Collection Balance", new { @class = "control-label font-bold" })
                                    <input type="text" id="CollectionsBalance" class="form-control font-mono" readonly />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="row">
                                <div class="col-md-12 text-right margin-bottom-5">
                                    <h4 class="font-bold text-ul margin-vertical-0">Payment Plan Details</h4>
                                </div>
                                <div class="col-md-12">
                                    <input type="hidden" id="MinPaymentAmount" />
                                    <input type="hidden" id="CorrectPaymentAmount" />
                                    <input type="hidden" id="UnpaidCount" />
                                    <div id="details" class="text-right">

                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <hr />
                                </div>
                                <div class="col-md-12 text-right margin-bottom-5">
                                    <h4 class="font-bold text-ul margin-vertical-0">Information</h4>
                                </div>
                                <div class="col-md-12">
                                    <div id="information" class="text-right text-danger">

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <hr />
                        </div>
                        <div class="col-md-2">
                            <input id="SubmitButton" class="btn btn-block btn-primary" type="submit" value="Submit" tabindex="7" data-form-action="@Url.Action("Payment", "Transaction")" data-confirm="Confirm submit?" disabled="disabled" />
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section scripts
{
    <script type="text/javascript">
        function ajaxCustomer($event) {
            $('#TransactionDetails1').prop('hidden', true);
            $('#TransactionDetails2').prop('hidden', true);
            $('select#TransactionHoldingID').find('option').remove();
            $('select#TransactionCodeID').find('option').remove();
            $('#CustomerName').val('');

            var data = {
                CustomerId: ($('#CustomerID').val()) ? $('#CustomerID').val() : 0
            }
            $.ajax({
                type: 'GET',
                dataType: 'json',
                url: getPath('~/api/TransactionApi/CheckIdPayment'),
                data: data,
                success: updateCustomer,
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log(textStatus, errorThrown);
                }
            });
            $event.preventDefault();
        }
        function updateCustomer(data) {
            if (data.message != null) {
                alert(data.message);
                return;
            }

            $('#CustomerName').val(data.customerName);
            $('#BalanceBefore').val(data.currentBalance.toFixed(2));
            $('#BalanceAfter').val(data.currentBalance.toFixed(2));
            $('#CounselorsBefore').val(data.counselorsBalance.toFixed(2));
            $('#CounselorsAfter').val(data.counselorsBalance.toFixed(2));
            $('#CollectionsBalance').val(data.collectionsBalance.toFixed(2));

            var list = $('select#TransactionHoldingID');
            list.append('<option value="0">OPTIONAL : SELECT A TRANSACTION IN HOLDING</option>');
            $(data.transactionHoldingSelectList).each(function (index, item) {
                list.append('<option value="' + item.value + '">' + item.text + '</option>');
            });

            var list = $('select#TransactionCodeID');
            list.append('<option value="0">SELECT A TRANSACTION CODE</option>');
            $(data.transactionCodeSelectList).each(function (index, item) {
                list.append('<option value="' + item.value + '">' + item.text + '</option>');
            });

            var detailsColumn = $('div#details');
            $('#MinPaymentAmount').val('');
            $('#CorrectPaymentAmount').val('');
            $('#UnpaidCount').val('');
            detailsColumn.empty();

            if (data.paymentPlan != null) {
                var firstUnpaid = false;
                var unpaidCount = data.paymentPlan.details.length - 1;

                $('#MinPaymentAmount').val(parseFloat($('#BalanceBefore').val() * 0.10).toFixed(2));
                $('#CorrectPaymentAmount').val(parseFloat(data.paymentPlan.details[unpaidCount].paymentTotal).toFixed(2));

                for (var i = 0; i < data.paymentPlan.details.length; i++) {
                    var detailsRowText = '$' +
                        data.paymentPlan.details[i].paymentTotal.toFixed(2) +
                        ' | Due: ' +
                        data.paymentPlan.details[i].dueDate;

                    var detailsRow = $(document.createElement('div'));
                    detailsRow.text(detailsRowText);
                    detailsRow.attr('data-amount', data.paymentPlan.details[i].amount);
                    detailsRow.attr('data-paymentTotal', data.paymentPlan.details[i].paymentTotal);
                    if (data.paymentPlan.details[i].paid == true) {
                        detailsRow.attr('style', 'text-decoration: line-through;');
                        unpaidCount--;
                    } else if (firstUnpaid == false) {
                        detailsRow.attr('id', 'FirstUnpaidPaymentPlanDetail');
                        firstUnpaid = true;
                    }
                    detailsRow.appendTo(detailsColumn);
                }
                $('#UnpaidCount').val(unpaidCount);
            }

            $('#TransactionAmount').val('').trigger('change');
            activateButton();
        }

        function ajaxTransactionHolding($event) {
            $('#TransactionDetails').prop('hidden', true);

            var data = {
                CustomerId: ($('#CustomerID').val()) ? $('#CustomerID').val() : 0,
                TransactionHoldingId: $('#TransactionHoldingID').val(),
            }
            $.ajax({
                type: 'GET',
                dataType: 'json',
                url: getPath('~/api/TransactionApi/CheckTransactionHoldingPayment'),
                data: data,
                success: updateTransactionHolding,
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log(textStatus, errorThrown);
                }
            });
            $event.preventDefault();
        }
        function updateTransactionHolding(data) {
            if (data == null) { return; }
            if (data.message != null) {
                alert(data.message);
                return;
            }

            $('#TransactionHolding_TransactionDescription').val(data.transactionHolding.transactionDescription);
            $('#TransactionHolding_TransactionAmt').val(data.transactionHolding.transactionAmt);
            $('#TransactionHolding_AddDateTime').val(data.transactionHolding.addDateTime);
            $('#TransactionHolding_Sender').val(data.transactionHolding.sender);
            $('#TransactionHolding_Status').val(data.transactionHolding.status);

            $('#TransactionDetails').prop('hidden', false);

            $('#TransactionAmount').val('').trigger('change');
            activateButton();
        }

        function updateTransactionCode() {
            $('#TransactionAmount').val('').trigger('change');
            activateButton();
        }

        function updateTransactionAmount() {
            var transactionAmount = parseFloat(($('#TransactionAmount').val()) ? $('#TransactionAmount').val() : 0);

            var counselorsBefore = parseFloat($('#CounselorsBefore').val());
            var counselorsAfter = parseFloat($('#CounselorsAfter').val());

            if (counselorsBefore > 0) {
                counselorsAfter = counselorsBefore - transactionAmount;
                transactionAmount = 0;
            }

            if (counselorsAfter < 0) {
                transactionAmount = 0 - counselorsAfter;
                counselorsAfter = 0;
            }

            var balanceBefore = parseFloat($('#BalanceBefore').val());
            var balanceAfter = balanceBefore - transactionAmount;

            $('#BalanceAfter').val(balanceAfter.toFixed(2));
            $('#CounselorsAfter').val(counselorsAfter.toFixed(2));

            activateButton();
        }

        function activateButton($event) {
            var customerID = $('#CustomerID').val();
            var transactionCodeID = $('#TransactionCodeID').val();
            var transactionAmount = parseFloat($('#TransactionAmount').val());
            var minPaymentAmount = parseFloat($('#MinPaymentAmount').val());
            var correctPaymentAmount = parseFloat($('#CorrectPaymentAmount').val());
            var counselorsBalance = parseFloat($('#CounselorsBefore').val());

            $('#information').empty();

            if (customerID == null || customerID == 0) {
                $('#SubmitButton').prop('disabled', true);
                return;
            }

            if (!isNaN(counselorsBalance) && counselorsBalance > 0) {
                $('#information')
                    .text('This customer has a counselors balance. Any amount entered here will be applied towards the counselors balance first. Any remaining amount will then be applied towards the account balance.');
            }

            if (transactionCodeID == null || transactionCodeID == 0) {
                $('#SubmitButton').prop('disabled', true);
                return;
            }

            if (transactionAmount == null || transactionAmount == '') {
                $('#SubmitButton').prop('disabled', true);
                return;
            }

            // adjust payment transaction amounts to a positive number to allow for accurate comparison to payment plans
            if (transactionAmount < 0) {
                transactionAmount = transactionAmount * -1;
            }

            if (!isNaN(minPaymentAmount) && transactionCodeID == 24 && transactionAmount < minPaymentAmount) {
                $('#information')
                    .append('<div>Minimum payment is ' +
                        minPaymentAmount.toFixed(2) +
                        '</div><div>(10% of current balance)</div>');
                $('#SubmitButton').prop('disabled', true);
                return;
            }

            if (correctPaymentAmount != null && transactionCodeID == 24 && !isNaN(transactionAmount) && transactionAmount != correctPaymentAmount) {
                if ($('#BalanceAfter').val() <= 0) {
                    $('#information')
                        .text('A payment this large will terminate the payment plan.');
                    return;
                }

                var remainingBalance = transactionAmount;
                var firstUnpaidPaymentTotal = parseFloat($('#FirstUnpaidPaymentPlanDetail').data('paymenttotal'));
                var firstUnpaidAmount = parseFloat($('#FirstUnpaidPaymentPlanDetail').data('amount'));
                var unpaidCount = parseInt($('#UnpaidCount').val());
                var remainingTotal = firstUnpaidPaymentTotal;
                var remainingAmount = firstUnpaidAmount;

                if (remainingBalance >= remainingTotal) {
                    remainingBalance -= remainingTotal;
                    remainingTotal = 0;
                    remainingAmount = 0;
                }
                else if (remainingBalance >= remainingAmount) {
                    remainingTotal = firstUnpaidPaymentTotal - remainingBalance;
                    remainingAmount = 0;
                    remainingBalance = 0;
                }
                else {
                    remainingTotal = firstUnpaidPaymentTotal - remainingBalance;
                    remainingAmount = firstUnpaidAmount - remainingBalance;
                    remainingBalance = 0;
                }

                remainingBalance -= remainingTotal;

                if (remainingBalance != 0) {
                    var newPaymentTotal = (firstUnpaidPaymentTotal - (remainingBalance / unpaidCount)).toFixed(2);
                    $('#information')
                        .append('<div>This amount will alter the payment plan amounts for the following months to:</div>\n<br /><div>' +
                            newPaymentTotal + ' per month for ' +
                            unpaidCount + ' months.</div>');
                }
            }

            $('#SubmitButton').prop('disabled', false);
            return;
        }

        function processLocks() {
            var customerID = $('#CustomerID_Lock').text();
            var transactionHoldingID = $('#TransactionHoldingID_Lock').text();

            if (customerID != 0) {
                $('#CustomerID').val(customerID);
                $('#CustomerID').change();
                var focusIndex = +($(':focus').attr('tabindex'));
                $('[tabindex="' + (focusIndex + 1) + '"]').focus();
                $('#CustomerID').prop('disabled', true);
                if (transactionHoldingID != 0) {
                    $('#TransactionHoldingID').val(transactionHoldingID);
                    $('#TransactionHoldingID').change();
                    var focusIndex = +($(':focus').attr('tabindex'));
                    $('[tabindex="' + (focusIndex + 1) + '"]').focus();
                    $('#TransactionHoldingID').prop('disabled', true);
                }
            }
        }

        function processSubmit() {
            $('[disabled]').prop('disabled', false);
            $('#SubmitButton').prop('disabled', true);
        }

        $(function () {
            $('#CustomerID').on('change', ajaxCustomer);
            $('#TransactionHoldingID').on('change', ajaxTransactionHolding);
            $('#TransactionCodeID').on('change', updateTransactionCode);
            $('#TransactionAmount').on('change', updateTransactionAmount);
            $(this).on('submit', processSubmit);

            processLocks();
        });
    </script>
}
