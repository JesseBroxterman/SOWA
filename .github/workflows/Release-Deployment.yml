name: release-publish artifact and trigger Azure to retrieve

on:
   release:
     types: [created]
   workflow_dispatch:

env:
  DEPLOY_ALL: false
  DEPLOY_INTERNAL: false
  DEPLOY_EXTERNAL: false

jobs:
  restore-build-publish:
    runs-on: ubuntu-latest

    steps:  
      - name: Get Last 2 Releases
        uses: octokit/graphql-action@v2.x
        id: get_latest_releases
        with:
          query: |
            query release($owner:String!,$repo:String!) {
              repository(owner:$owner,name:$repo) {
                releases(first:2) {
                  nodes {
                    tagName
                  }
                }
              }
            }
          variables: |
            owner: JesseBroxterman
            repo: ${{ github.event.repository.name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}         
          
      - name: Get Tag Name of Previous Release
        id: previous_release
        run: echo "tagName=${{ fromJson(steps.get_latest_releases.outputs.data).repository.releases.nodes[1].tagName }}" >> $GITHUB_OUTPUT

      - name: Get Tag Name of Previous Release
        id: current_release
        run: echo "tagName=${{ fromJson(steps.get_latest_releases.outputs.data).repository.releases.nodes[0].tagName }}" >> $GITHUB_OUTPUT        

      - run: |
          echo "previous tag =${{ steps.previous_release.outputs.tagName }}"
          if  [ -z ${{ steps.previous_release.outputs.tagName }}]; then
            echo "DEPLOY_ALL=true" >> $GITHUB_ENV
          fi

      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v2
        if: ${{ env.DEPLOY_ALL != 'true' }}
        id: changes
        with:
          base: ${{ steps.previous_release.outputs.tagName }}
          filters: |
            Shared:
            - '**/Common/**'
            - '**/Common.Web/**'
            - '**/Identity.BL/**'
            - '**/Identity.DAL/**'
            - '**/Identity.DM/**'
            - '**/Notify.BL/**'
            - '**/Notify.DAL/**'       
            - '**/Notify.DM/**'       
            - '**/PE.BL/**'
            - '**/PE.DAL/**'       
            - '**/PE.DM/**'       
            - '**/SW.BLL/**'
            - '**/SW.BLL.KanPay/**'
            - '**/SW.DAL/**'
            - '**/SW.DM/**'                
            External:
            - '${{ vars.SOLUTION_NAME }}/${{ vars.EXTERNAL_WEB_PROJECT }}/**'
            Internal:
            - '${{ vars.SOLUTION_NAME }}/${{ vars.INTERNAL_WEB_PROJECT }}/**'

      - name: Convert dorny outputs to environment variables
        shell: bash
        if: ${{ env.DEPLOY_ALL != 'true' }}
        run: |
          echo "Testing first echo"
          echo "DEPLOY_ALL =  ${{ env.DEPLOY_ALL }}"
          echo "DEPLOY_INTERNAL =  ${{ env.DEPLOY_INTERNAL }}"
          echo "DEPLOY_EXTERNAL =  ${{ env.DEPLOY_EXTERNAL }}"          
          if  ['${{ steps.changes.outputs.Shared }}'=='true']; then
            echo "The Shared variable was true"
            echo "DEPLOY_ALL=true" >> $GITHUB_ENV
          fi
          if  ['${{ steps.changes.outputs.Internal }}'=='true']; then
            echo "The Internal variable was true"          
            echo "DEPLOY_INTERNAL=true" >> $GITHUB_ENV
          fi
          if  ['${{ steps.changes.outputs.External }}'=='true']; then
            echo "The External variable was true"          
            echo "DEPLOY_EXTERNAL=true" >> $GITHUB_ENV
          fi

          if ['true'=='true']; then
            echo "True equals true worked"
          fi

      - name: Publish Internal
        if: (env.DEPLOY_INTERNAL == 'true' || env.DEPLOY_ALL == 'true')
        run: dotnet publish ./${{ vars.SOLUTION_NAME }}/${{ vars.INTERNAL_WEB_PROJECT }}/${{ vars.INTERNAL_WEB_PROJECT }}.csproj --configuration Release

      #- name: Upload Internal Artifact
      #  if: (env.DEPLOY_INTERNAL == 'true' || env.DEPLOY_ALL == 'true')
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: ${{ vars.SOLUTION_NAME }}-Internal
      #    path: ./${{ vars.SOLUTION_NAME }}/${{ vars.INTERNAL_WEB_PROJECT }}/bin/Release/net6.0

      #- name: Trigger Azure UAT Internal Deployment Pipeline
      #  uses: azure/pipelines@v1
      #  if: (env.DEPLOY_INTERNAL == 'true' || env.DEPLOY_ALL == 'true')      
      #  with:
      #    azure-devops-project-url: ${{ vars.AZURE_DEVOPS_PROJECT_URL }}
      #    azure-pipeline-name: Internal-UAT-Deploy
      #    azure-devops-token: ${{ secrets.AZURE_DEVOPS_TOKEN }}

      #- name: Trigger Azure Prod Internal Deployment Pipeline
      #  uses: azure/pipelines@v1
      #  if: (env.DEPLOY_INTERNAL == 'true' || env.DEPLOY_ALL == 'true')      
      #  with:
      #    azure-devops-project-url: ${{ vars.AZURE_DEVOPS_PROJECT_URL }}
      #    azure-pipeline-name: Internal-Prod-Deploy
      #    azure-devops-token: ${{ secrets.AZURE_DEVOPS_TOKEN }}


      - name: Publish External
        if: (env.DEPLOY_EXTERNAL == 'true' || env.DEPLOY_ALL == 'true')
        run: dotnet publish ./${{ vars.SOLUTION_NAME }}/${{ vars.EXTERNAL_WEB_PROJECT }}/${{ vars.EXTERNAL_WEB_PROJECT }}.csproj --configuration Release

      #- name: Upload External Artifact
      #  if: (env.DEPLOY_EXTERNAL == 'true' || env.DEPLOY_ALL == 'true')
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: ${{ vars.SOLUTION_NAME }}-External
      #    path: ./${{ vars.SOLUTION_NAME }}/${{ vars.EXTERNAL_WEB_PROJECT }}/bin/Release/net6.0

      #- name: Trigger Azure UAT External Deployment Pipeline
      #  uses: azure/pipelines@v1
      #  if: (env.DEPLOY_EXTERNAL == 'true' || env.DEPLOY_ALL == 'true')      
      #  with:
      #    azure-devops-project-url: ${{ vars.AZURE_DEVOPS_PROJECT_URL }}
      #    azure-pipeline-name: External-UAT-Deploy
      #    azure-devops-token: ${{ secrets.AZURE_DEVOPS_TOKEN }}            

     # - name: Trigger Azure UAT External Deployment Pipeline
     #   uses: azure/pipelines@v1
     #   if: (env.DEPLOY_EXTERNAL == 'true' || env.DEPLOY_ALL == 'true')      
     #   with:
     #     azure-devops-project-url: ${{ vars.AZURE_DEVOPS_PROJECT_URL }}
     #     azure-pipeline-name: External-Prod-Deploy
     #     azure-devops-token: ${{ secrets.AZURE_DEVOPS_TOKEN }}             
