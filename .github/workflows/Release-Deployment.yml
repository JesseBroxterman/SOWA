name: release-publish artifact and trigger Azure to retrieve

on:
   release:
     types: [created]
   workflow_dispatch:

jobs:
  restore-build-publish:
    runs-on: ubuntu-latest

    steps:  
      - name: Get Last 2 Releases
        uses: octokit/graphql-action@v2.x
        id: get_latest_releases
        with:
          query: |
            query release($owner:String!,$repo:String!) {
              repository(owner:$owner,name:$repo) {
                releases(first:2) {
                  nodes {
                    tagName
                  }
                }
              }
            }
          variables: |
            owner: ${{ github.event.repository.name }}
            repo: ${{ github.event.repository.name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}         
          
      - name: Get Tag Name of Previous Release
        id: previous_release
        run: echo "tagName=${{ fromJson(steps.get_latest_releases.outputs.data).repository.releases.nodes[1].tagName }}" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          base: ${{ steps.previous_release.outputs.tagName }}
          filters: |
            Shared:
            - '${{ var.SOLUTION_NAME }}/Common/**'
            - '${{ var.SOLUTION_NAME }}/Common.Web/**'
            - '${{ var.SOLUTION_NAME }}/Identity.BL/**'
            - '${{ var.SOLUTION_NAME }}/Notify.BL/**'
            - '${{ var.SOLUTION_NAME }}/PE.BL/**'
            - '${{ var.SOLUTION_NAME }}/SW.BLL/**'                      
            External:
            - '${{ var.SOLUTION_NAME }}/${{ var.EXTERNAL_WEB_PROJECT }}/**'
            Internal:
            - '${{ var.SOLUTION_NAME }}/${{ var.INTERNAL_WEB_PROJECT }}/**'

      - name: Publish Internal
        if: (steps.changes.outputs.Internal == 'true' || steps.changes.outputs.Shared == 'true')
        run: dotnet publish ./${{ var.SOLUTION_NAME }}/${{ var.INTERNAL_WEB_PROJECT }}/${{ var.INTERNAL_WEB_PROJECT }}.csproj --configuration Release

      - name: Upload Internal Artifact
        if: (steps.changes.outputs.Internal == 'true' || steps.changes.outputs.Shared == 'true')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ var.SOLUTION_NAME }}-Internal
          path: ./${{ var.SOLUTION_NAME }}/${{ var.INTERNAL_WEB_PROJECT }}/bin/Release/net6.0

      - uses: azure/pipelines@v1
        if: (steps.changes.outputs.Internal == 'true' || steps.changes.outputs.Shared == 'true')      
        with:
          azure-devops-project-url: ${{ var.AZURE_DEVOPS_PROJECT_URL }}
          azure-pipeline-name: Internal-Release-Deploy
          azure-devops-token: ${{ secrets.AZURE_DEVOPS_TOKEN }}



      - name: Publish External
        if: (steps.changes.outputs.External == 'true' || steps.changes.outputs.Shared == 'true')
        run: dotnet publish ./${{ var.SOLUTION_NAME }}/${{ var.EXTERNAL_WEB_PROJECT }}/${{ var.EXTERNAL_WEB_PROJECT }}.csproj --configuration Release

      - name: Upload External Artifact
        if: (steps.changes.outputs.External == 'true' || steps.changes.outputs.Shared == 'true')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ var.SOLUTION_NAME }}-External
          path: ./${{ var.SOLUTION_NAME }}/${{ var.EXTERNAL_WEB_PROJECT }}/bin/Release/net6.0

      - uses: azure/pipelines@v1
        if: (steps.changes.outputs.External == 'true' || steps.changes.outputs.Shared == 'true')      
        with:
          azure-devops-project-url: ${{ var.AZURE_DEVOPS_PROJECT_URL }}
          azure-pipeline-name: External-Release-Deploy
          azure-devops-token: ${{ secrets.AZURE_DEVOPS_TOKEN }}            
